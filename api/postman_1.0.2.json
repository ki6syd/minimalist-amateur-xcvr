{
	"info": {
		"_postman_id": "e0c01f1e-4662-42b3-b2c0-ebca8f7988c8",
		"name": "MAX-3B",
		"description": "API for MAX-3B radio\n\nContact Support:\n Email: ki6syd@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28715925"
	},
	"item": [
		{
			"name": "ft8",
			"item": [
				{
					"name": "Send a FT8 free text message",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ft8?messageText=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&ignoreTime=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ft8"
							],
							"query": [
								{
									"key": "messageText",
									"value": "<string>",
									"description": "(Required) 13 character free-text FT8 message to send"
								},
								{
									"key": "timeNow",
									"value": "<integer>",
									"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
								},
								{
									"key": "rfFrequency",
									"value": "<integer>",
									"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
								},
								{
									"key": "audioFrequency",
									"value": "<integer>",
									"description": "Audio frequency (USB) [hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
								},
								{
									"key": "ignoreTime",
									"value": "<boolean>",
									"description": "If set true, FT8 transmission will begin immediately without waiting for the next 15 second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
								}
							]
						}
					},
					"response": [
						{
							"name": "Message added to queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ft8?messageText=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ft8"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) 13 character free-text FT8 message to send"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next 15 second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid / not understood",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ft8?messageText=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ft8"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) 13 character free-text FT8 message to send"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next 15 second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unable to accept message into queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ft8?messageText=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ft8"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) 13 character free-text FT8 message to send"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next 15 second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "wspr",
			"item": [
				{
					"name": "Send a WSPR message",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wspr?callSign=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&gridSquare=<string>&power=<integer>&ignoreTime=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wspr"
							],
							"query": [
								{
									"key": "callSign",
									"value": "<string>",
									"description": "(Required) Callsign (6 characters maximum)"
								},
								{
									"key": "timeNow",
									"value": "<integer>",
									"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
								},
								{
									"key": "rfFrequency",
									"value": "<integer>",
									"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
								},
								{
									"key": "audioFrequency",
									"value": "<integer>",
									"description": "Audio frequency (USB) [Hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
								},
								{
									"key": "gridSquare",
									"value": "<string>",
									"description": "Grid square used for WSPR transmission (4 characters maximum)"
								},
								{
									"key": "power",
									"value": "<integer>",
									"description": "Power level [dBm] used for WSPR transmission information (dBm). Does not"
								},
								{
									"key": "ignoreTime",
									"value": "<boolean>",
									"description": "If set true, FT8 transmission will begin immediately without waiting for the next transmission second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
								}
							]
						}
					},
					"response": [
						{
							"name": "Message added to queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/wspr?callSign=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&gridSquare=<string>&power=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"wspr"
									],
									"query": [
										{
											"key": "callSign",
											"value": "<string>",
											"description": "(Required) Callsign (6 characters maximum)"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [Hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "gridSquare",
											"value": "<string>",
											"description": "Grid square used for WSPR transmission (4 characters maximum)"
										},
										{
											"key": "power",
											"value": "<integer>",
											"description": "Power level [dBm] used for WSPR transmission information (dBm). Does not"
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next transmission second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid / not understood",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/wspr?callSign=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&gridSquare=<string>&power=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"wspr"
									],
									"query": [
										{
											"key": "callSign",
											"value": "<string>",
											"description": "(Required) Callsign (6 characters maximum)"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [Hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "gridSquare",
											"value": "<string>",
											"description": "Grid square used for WSPR transmission (4 characters maximum)"
										},
										{
											"key": "power",
											"value": "<integer>",
											"description": "Power level [dBm] used for WSPR transmission information (dBm). Does not"
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next transmission second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unable to accept message into queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/wspr?callSign=<string>&timeNow=<integer>&rfFrequency=<integer>&audioFrequency=<integer>&gridSquare=<string>&power=<integer>&ignoreTime=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"wspr"
									],
									"query": [
										{
											"key": "callSign",
											"value": "<string>",
											"description": "(Required) Callsign (6 characters maximum)"
										},
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "Caller's current time [epoch ms]. If provided, radio will update its current time to match timeNow. If not provided, radio will use its best estimate of current time."
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										},
										{
											"key": "audioFrequency",
											"value": "<integer>",
											"description": "Audio frequency (USB) [Hz] relative to RF dial frequency [Hz]. If not provided, radio will pick an audio frequency using firmware-programmed logic. If audioFrequency is provided but rfFrequency is not provided, behavior is undefined."
										},
										{
											"key": "gridSquare",
											"value": "<string>",
											"description": "Grid square used for WSPR transmission (4 characters maximum)"
										},
										{
											"key": "power",
											"value": "<integer>",
											"description": "Power level [dBm] used for WSPR transmission information (dBm). Does not"
										},
										{
											"key": "ignoreTime",
											"value": "<boolean>",
											"description": "If set true, FT8 transmission will begin immediately without waiting for the next transmission second window. If set false or not included, the radio will wait for the next transmission window based on its internal time estimate."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "cw",
			"item": [
				{
					"name": "Send a CW message",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cw?messageText=<string>&rfFrequency=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cw"
							],
							"query": [
								{
									"key": "messageText",
									"value": "<string>",
									"description": "(Required) String to send"
								},
								{
									"key": "rfFrequency",
									"value": "<integer>",
									"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
								}
							]
						}
					},
					"response": [
						{
							"name": "Message added to queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cw?messageText=<string>&rfFrequency=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cw"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) String to send"
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid / not understood",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cw?messageText=<string>&rfFrequency=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cw"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) String to send"
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Unable to accept message into queue",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cw?messageText=<string>&rfFrequency=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cw"
									],
									"query": [
										{
											"key": "messageText",
											"value": "<string>",
											"description": "(Required) String to send"
										},
										{
											"key": "rfFrequency",
											"value": "<integer>",
											"description": "Dial frequency for sending [Hz]. If not provided, radio will pick a frequency using firmware-defined logic."
										}
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "queue",
			"item": [
				{
					"name": "Length of the radio's queue of digital messages",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/queue",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"queue"
							]
						}
					},
					"response": [
						{
							"name": "Number of total messages in radio's queue of digital modes messages",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/queue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"queue"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Stop sending any queued messages, and delete all messages.",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/queue",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"queue"
							]
						}
					},
					"response": [
						{
							"name": "Stopped and deleted messages.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/queue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"queue"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Nothing to delete.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/queue",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"queue"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "time",
			"item": [
				{
					"name": "Gets the radio's current time",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/time",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"time"
							]
						}
					},
					"response": [
						{
							"name": "Current time [epoch ms]",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"time"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Time has never been set.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/time",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"time"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Set the radio's time",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/time?timeNow=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"time"
							],
							"query": [
								{
									"key": "timeNow",
									"value": "<integer>",
									"description": "(Required) Current time [epoch ms]."
								}
							]
						}
					},
					"response": [
						{
							"name": "Time accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/time?timeNow=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"time"
									],
									"query": [
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "(Required) Current time [epoch ms]."
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/time?timeNow=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"time"
									],
									"query": [
										{
											"key": "timeNow",
											"value": "<integer>",
											"description": "(Required) Current time [epoch ms]."
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "frequency",
			"item": [
				{
					"name": "Gets the radio's current frequency",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/frequency",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"frequency"
							]
						}
					},
					"response": [
						{
							"name": "Current dial frequency [Hz]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/frequency",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"frequency"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Set the radio's dial frequency",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/frequency?frequency=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"frequency"
							],
							"query": [
								{
									"key": "frequency",
									"value": "<integer>",
									"description": "(Required) New frequency [Hz]"
								}
							]
						}
					},
					"response": [
						{
							"name": "Frequency accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/frequency?frequency=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"frequency"
									],
									"query": [
										{
											"key": "frequency",
											"value": "<integer>",
											"description": "(Required) New frequency [Hz]"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/frequency?frequency=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"frequency"
									],
									"query": [
										{
											"key": "frequency",
											"value": "<integer>",
											"description": "(Required) New frequency [Hz]"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "volume",
			"item": [
				{
					"name": "Gets the radio's current audio volume",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/volume",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"volume"
							]
						}
					},
					"response": [
						{
							"name": "Current sidetone level [arbitrary units]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/volume",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volume"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Set the radio's volume",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/volume?audioLevel=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"volume"
							],
							"query": [
								{
									"key": "audioLevel",
									"value": "<integer>",
									"description": "(Required) Audio volume while receiving [arbitrary units]"
								}
							]
						}
					},
					"response": [
						{
							"name": "Volume accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volume?audioLevel=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volume"
									],
									"query": [
										{
											"key": "audioLevel",
											"value": "<integer>",
											"description": "(Required) Audio volume while receiving [arbitrary units]"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/volume?audioLevel=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"volume"
									],
									"query": [
										{
											"key": "audioLevel",
											"value": "<integer>",
											"description": "(Required) Audio volume while receiving [arbitrary units]"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "sidetone",
			"item": [
				{
					"name": "Gets the radio's current sidetone level offset",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sidetone",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sidetone"
							]
						}
					},
					"response": [
						{
							"name": "Current sidetone level offset [arbitrary units]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sidetone",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sidetone"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Set the radio's sidetone level OFFSET, relative to audio level",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/sidetone?sidetoneLevelOffset=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sidetone"
							],
							"query": [
								{
									"key": "sidetoneLevelOffset",
									"value": "<integer>",
									"description": "(Required) Sidetone volume OFFSET while receiving, relative to audio level [arbitrary units]"
								}
							]
						}
					},
					"response": [
						{
							"name": "Sidetone level accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sidetone?sidetoneLevelOffset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sidetone"
									],
									"query": [
										{
											"key": "sidetoneLevelOffset",
											"value": "<integer>",
											"description": "(Required) Sidetone volume OFFSET while receiving, relative to audio level [arbitrary units]"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sidetone?sidetoneLevelOffset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sidetone"
									],
									"query": [
										{
											"key": "sidetoneLevelOffset",
											"value": "<integer>",
											"description": "(Required) Sidetone volume OFFSET while receiving, relative to audio level [arbitrary units]"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "cwSpeed",
			"item": [
				{
					"name": "Gets the keyer's speed",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/cwSpeed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cwSpeed"
							]
						}
					},
					"response": [
						{
							"name": "Current keyer speed [wpm]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/cwSpeed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cwSpeed"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Set the keyer's speed",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cwSpeed?speed=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cwSpeed"
							],
							"query": [
								{
									"key": "speed",
									"value": "<integer>",
									"description": "(Required) Keyer speed [wpm]"
								}
							]
						}
					},
					"response": [
						{
							"name": "Speed accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cwSpeed?speed=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cwSpeed"
									],
									"query": [
										{
											"key": "speed",
											"value": "<integer>",
											"description": "(Required) Keyer speed [wpm]"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/cwSpeed?speed=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"cwSpeed"
									],
									"query": [
										{
											"key": "speed",
											"value": "<integer>",
											"description": "(Required) Keyer speed [wpm]"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "rxBandwidth",
			"item": [
				{
					"name": "Gets the radio's rx bandwidth",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rxBandwidth",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rxBandwidth"
							]
						}
					},
					"response": [
						{
							"name": "Current rx bandwith",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rxBandwidth",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rxBandwidth"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "SSB"
						}
					]
				},
				{
					"name": "Set the radio's rx bandwidth",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rxBandwidth?bw=SSB",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rxBandwidth"
							],
							"query": [
								{
									"key": "bw",
									"value": "SSB",
									"description": "(Required) Audio filter bandwidth"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bandwidth accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rxBandwidth?bw=SSB",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rxBandwidth"
									],
									"query": [
										{
											"key": "bw",
											"value": "SSB",
											"description": "(Required) Audio filter bandwidth"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rxBandwidth?bw=SSB",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rxBandwidth"
									],
									"query": [
										{
											"key": "bw",
											"value": "SSB",
											"description": "(Required) Audio filter bandwidth"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "lna",
			"item": [
				{
					"name": "Gets the radio's LNA state",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/lna",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lna"
							]
						}
					},
					"response": [
						{
							"name": "Current LNA state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/lna",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lna"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Set the radio's LNA on or off",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/lna?lnaState=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"lna"
							],
							"query": [
								{
									"key": "lnaState",
									"value": "true",
									"description": "(Required) LNA state"
								}
							]
						}
					},
					"response": [
						{
							"name": "LNA setting accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lna?lnaState=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lna"
									],
									"query": [
										{
											"key": "lnaState",
											"value": "true",
											"description": "(Required) LNA state"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/lna?lnaState=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"lna"
									],
									"query": [
										{
											"key": "lnaState",
											"value": "true",
											"description": "(Required) LNA state"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "antenna",
			"item": [
				{
					"name": "Gets the radio's antenna path",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/antenna",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"antenna"
							]
						}
					},
					"response": [
						{
							"name": "Current antenna state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/antenna",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"antenna"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "EFHW"
						}
					]
				},
				{
					"name": "Set the radio's antenna connection",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/antenna?antennaPath=EFHW",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"antenna"
							],
							"query": [
								{
									"key": "antennaPath",
									"value": "EFHW",
									"description": "(Required) Requested RF pathway to connect to antenna"
								}
							]
						}
					},
					"response": [
						{
							"name": "Antenna setting accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/antenna?antennaPath=EFHW",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"antenna"
									],
									"query": [
										{
											"key": "antennaPath",
											"value": "EFHW",
											"description": "(Required) Requested RF pathway to connect to antenna"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/antenna?antennaPath=EFHW",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"antenna"
									],
									"query": [
										{
											"key": "antennaPath",
											"value": "EFHW",
											"description": "(Required) Requested RF pathway to connect to antenna"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "speaker",
			"item": [
				{
					"name": "Gets the radio's speaker state",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/speaker",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"speaker"
							]
						}
					},
					"response": [
						{
							"name": "Current speaker state",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/speaker",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"speaker"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "true"
						}
					]
				},
				{
					"name": "Set the internal speaker",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/speaker?speakerState=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"speaker"
							],
							"query": [
								{
									"key": "speakerState",
									"value": "true",
									"description": "(Required) LNA state"
								}
							]
						}
					},
					"response": [
						{
							"name": "Speaker setting accepted",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/speaker?speakerState=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"speaker"
									],
									"query": [
										{
											"key": "speakerState",
											"value": "true",
											"description": "(Required) LNA state"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/speaker?speakerState=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"speaker"
									],
									"query": [
										{
											"key": "speakerState",
											"value": "true",
											"description": "(Required) LNA state"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "inputVoltage",
			"item": [
				{
					"name": "Gets the radio's measured input voltage",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/inputVoltage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inputVoltage"
							]
						}
					},
					"response": [
						{
							"name": "Current input voltage [V]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/inputVoltage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"inputVoltage"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				}
			]
		},
		{
			"name": "sMeter",
			"item": [
				{
					"name": "Gets the radio's S-Meter reading",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sMeter",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sMeter"
							]
						}
					},
					"response": [
						{
							"name": "Current signal strength [S-units]",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sMeter",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sMeter"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				}
			]
		},
		{
			"name": "temperature",
			"item": [
				{
					"name": "Gets the radio's temperature",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/temperature",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"temperature"
							]
						}
					},
					"response": [
						{
							"name": "Current temperature. Radio implementation decides which temperature to report, if multiple available.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/temperature",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"temperature"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				}
			]
		},
		{
			"name": "rxTxStatus",
			"item": [
				{
					"name": "Gets the radio's receive or transmit status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/rxTxStatus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rxTxStatus"
							]
						}
					},
					"response": [
						{
							"name": "Current status",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rxTxStatus",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rxTxStatus"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "TX"
						}
					]
				}
			]
		},
		{
			"name": "githash",
			"item": [
				{
					"name": "Gets the githash of the current firmware",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/githash",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"githash"
							]
						}
					},
					"response": [
						{
							"name": "githash",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/githash",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"githash"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			]
		},
		{
			"name": "heap",
			"item": [
				{
					"name": "Gets the radio's available heap space",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/heap",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"heap"
							]
						}
					},
					"response": [
						{
							"name": "Free heap space in bytes",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/heap",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"heap"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				}
			]
		},
		{
			"name": "address",
			"item": [
				{
					"name": "Gets the IP and/or MAC address of the radio",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": [
						{
							"name": "ip address",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"address"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			]
		},
		{
			"name": "hwRevision",
			"item": [
				{
					"name": "Information about radio hardware",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/hwRevision",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hwRevision"
							]
						}
					},
					"response": [
						{
							"name": "Information about radio hardware",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hwRevision",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hwRevision"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			]
		},
		{
			"name": "unitSerial",
			"item": [
				{
					"name": "Hardware serial number",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/unitSerial",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unitSerial"
							]
						}
					},
					"response": [
						{
							"name": "Radio's serial number",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/unitSerial",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"unitSerial"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			]
		},
		{
			"name": "api",
			"item": [
				{
					"name": "Gets the API versions supported by the radio. Note, there is no base URL for this action",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api"
							]
						}
					},
					"response": [
						{
							"name": "Highest API version implemented by the radio",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<string>"
						}
					]
				}
			]
		},
		{
			"name": "selfTest",
			"item": [
				{
					"name": "Routines for characterization. All return an array of XY points",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/selfTest?testName=AUDIO",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"selfTest"
							],
							"query": [
								{
									"key": "testName",
									"value": "AUDIO",
									"description": "(Required) Type of self-test to run"
								}
							]
						}
					},
					"response": [
						{
							"name": "Data collected",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/selfTest?testName=AUDIO",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfTest"
									],
									"query": [
										{
											"key": "testName",
											"value": "AUDIO",
											"description": "(Required) Type of self-test to run"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[]"
						},
						{
							"name": "Unable to complete routine",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/selfTest?testName=AUDIO",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"selfTest"
									],
									"query": [
										{
											"key": "testName",
											"value": "AUDIO",
											"description": "(Required) Type of self-test to run"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "debug",
			"item": [
				{
					"name": "Gets the radio's debug variable",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/debug",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"debug"
							]
						}
					},
					"response": [
						{
							"name": "Current debug variable. Radio picks the value to send depending on context.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/debug",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"debug"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Run special code intended only for debug",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/debug?command=<integer>&value=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"debug"
							],
							"query": [
								{
									"key": "command",
									"value": "<integer>",
									"description": "(Required) Special command number"
								},
								{
									"key": "value",
									"value": "<string>",
									"description": "Data corresponding to command"
								}
							]
						}
					},
					"response": [
						{
							"name": "Accepted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/debug?command=<integer>&value=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"debug"
									],
									"query": [
										{
											"key": "command",
											"value": "<integer>",
											"description": "(Required) Special command number"
										},
										{
											"key": "value",
											"value": "<string>",
											"description": "Data corresponding to command"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/debug?command=<integer>&value=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"debug"
									],
									"query": [
										{
											"key": "command",
											"value": "<integer>",
											"description": "(Required) Special command number"
										},
										{
											"key": "value",
											"value": "<string>",
											"description": "Data corresponding to command"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "ota",
			"item": [
				{
					"name": "Over the air firmware update. Note, there is no base URL for this action",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "orderId",
									"value": "<integer>",
									"type": "text"
								},
								{
									"key": "userId",
									"value": "<integer>",
									"type": "text"
								},
								{
									"key": "fileName",
									"value": "<string>",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/ota",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ota"
							]
						}
					},
					"response": [
						{
							"name": "Accepted",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "orderId",
											"value": "<integer>",
											"type": "text"
										},
										{
											"key": "userId",
											"value": "<integer>",
											"type": "text"
										},
										{
											"key": "fileName",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ota",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ota"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Out of range / invalid / not understood",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "orderId",
											"value": "<integer>",
											"type": "text"
										},
										{
											"key": "userId",
											"value": "<integer>",
											"type": "text"
										},
										{
											"key": "fileName",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ota",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ota"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://radio.local/api/v1"
		}
	]
}