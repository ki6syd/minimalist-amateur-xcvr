#include <Arduino.h>
#include <Wire.h>
#include <si5351.h>


#include "AudioTools.h"
#include "AudioLibs/I2SCodecStream.h"

#include "wifi_conn.h"

Si5351 si5351;
// TwoWire clockBus = TwoWire(0);
// TwoWire codecBus = TwoWire(1);
TwoWire                       myWire = TwoWire(0);                      // universal I2C interface

AudioInfo                     info_stereo(F_AUDIO, 2, 16);                // sampling rate, # channels, bit depth
AudioInfo                     info_mono(F_AUDIO, 1, 16);                  // sampling rate, # channels, bit depth
DriverPins                    my_pins;                                  // board pins
AudioBoard                    audio_board(AudioDriverES8388, my_pins);  // audio board
I2SCodecStream                i2s_stream(audio_board);                  // i2s codec
// CsvOutput<int16_t> csvStream(Serial);

// SineWaveGenerator<int16_t>    sine_wave(32000);
// GeneratedSoundStream<int16_t> sound_stream(sine_wave);

ChannelSplitOutput            input_split;                              // splits the stereo input stream into two mono streams
VolumeStream                  out_vol;                                  // output volume control
FilteredStream<int16_t, float> filtered(out_vol, info_mono.channels);
ChannelFormatConverterStreamT<int16_t> mono_to_stereo(i2s_stream);
StreamCopy copier_1(input_split, i2s_stream);


// example of i2s codec for both input and output: https://github.com/pschatzmann/arduino-audio-tools/blob/main/examples/examples-audiokit/streams-audiokit-filter-audiokit/streams-audiokit-filter-audiokit.ino
int t = 0;
int counter = 0;

// fiiir.com
float coeff_highpass[] = {
    0.000410882554562224,
    0.000297480100337645,
    -0.000000000000000002,
    -0.000325555245630210,
    -0.000490916638424641,
    -0.000374031826002786,
    0.000000000000000001,
    0.000444741406406661,
    0.000691587929777083,
    0.000539592806966980,
    0.000000000000000002,
    -0.000660593735936257,
    -0.001034584466460235,
    -0.000809879862260818,
    0.000000000000000002,
    0.000989753448695849,
    0.001544233243751745,
    0.001202734397603602,
    -0.000000000000000009,
    -0.001451627600164929,
    -0.002249330861839249,
    -0.001739611975918887,
    0.000000000000000003,
    0.002070358778220086,
    0.003186347471234573,
    0.002448189996916952,
    -0.000000000000000004,
    -0.002878292622264269,
    -0.004405096004631814,
    -0.003367012160352114,
    0.000000000000000005,
    0.003922260848129713,
    0.005979114021037334,
    0.004554095561807653,
    -0.000000000000000006,
    -0.005275552992770101,
    -0.008025763055535663,
    -0.006103885707924579,
    0.000000000000000007,
    0.007062442618846036,
    0.010748323716705642,
    0.008183622931969862,
    -0.000000000000000008,
    -0.009513693988260534,
    -0.014534189297667238,
    -0.011121007334816449,
    0.000000000000000008,
    0.013110784033022471,
    0.020221211334860243,
    0.015653543025635503,
    -0.000000000000000009,
    -0.019044535641026632,
    -0.030002831852219677,
    -0.023842417090532413,
    0.000000000000000009,
    0.031245627890239346,
    0.051952719166584976,
    0.044372071700376561,
    -0.000000000000000010,
    -0.074657471030619801,
    -0.158841220085460061,
    -0.225033886463445354,
    0.749902537112952405,
    -0.225033886463445354,
    -0.158841220085460061,
    -0.074657471030619801,
    -0.000000000000000010,
    0.044372071700376561,
    0.051952719166584976,
    0.031245627890239346,
    0.000000000000000009,
    -0.023842417090532416,
    -0.030002831852219681,
    -0.019044535641026636,
    -0.000000000000000009,
    0.015653543025635507,
    0.020221211334860247,
    0.013110784033022469,
    0.000000000000000008,
    -0.011121007334816449,
    -0.014534189297667238,
    -0.009513693988260536,
    -0.000000000000000008,
    0.008183622931969860,
    0.010748323716705640,
    0.007062442618846037,
    0.000000000000000007,
    -0.006103885707924581,
    -0.008025763055535668,
    -0.005275552992770102,
    -0.000000000000000006,
    0.004554095561807655,
    0.005979114021037338,
    0.003922260848129713,
    0.000000000000000005,
    -0.003367012160352113,
    -0.004405096004631815,
    -0.002878292622264270,
    -0.000000000000000004,
    0.002448189996916952,
    0.003186347471234573,
    0.002070358778220086,
    0.000000000000000003,
    -0.001739611975918889,
    -0.002249330861839249,
    -0.001451627600164930,
    -0.000000000000000009,
    0.001202734397603602,
    0.001544233243751745,
    0.000989753448695850,
    0.000000000000000002,
    -0.000809879862260818,
    -0.001034584466460235,
    -0.000660593735936258,
    0.000000000000000002,
    0.000539592806966980,
    0.000691587929777083,
    0.000444741406406661,
    0.000000000000000001,
    -0.000374031826002787,
    -0.000490916638424641,
    -0.000325555245630210,
    -0.000000000000000002,
    0.000297480100337645,
    0.000410882554562224
};

float coeff_lowpass[] = {
    0.000186203492620714,
    0.000358065154720466,
    0.000436323329454989,
    0.000391858108372057,
    0.000222473287428035,
    -0.000041427641509155,
    -0.000337292855642454,
    -0.000580044435167060,
    -0.000681852893465041,
    -0.000579228630927423,
    -0.000260299151581667,
    0.000217699814101463,
    0.000730254616939991,
    0.001111707331311193,
    0.001202751397600166,
    0.000907423021693358,
    0.000241139688010121,
    -0.000649752180947985,
    -0.001510402700494669,
    -0.002042926386522991,
    -0.002000587642325403,
    -0.001283145319643529,
    0.000000000000000002,
    0.001527105591954072,
    0.002833983867493064,
    0.003445423566867317,
    0.003033751448417979,
    0.001554937575951037,
    -0.000687877612083288,
    -0.003086934784264537,
    -0.004881336318525625,
    -0.005384016004556955,
    -0.004220318166975841,
    -0.001500810109560981,
    0.002138712951760944,
    0.005663069073443566,
    0.007912789576078522,
    0.007960861945334644,
    0.005447529313824709,
    0.000782233811810277,
    -0.004870918450166409,
    -0.009850306652390593,
    -0.012449556768766750,
    -0.011451261129746782,
    -0.006586594586668882,
    0.001231759099248474,
    0.010006545308465764,
    0.017099458717990661,
    0.019936570411931209,
    0.016803375024339866,
    0.007510592131927805,
    -0.006276159828890907,
    -0.021177300831047911,
    -0.032728051543017583,
    -0.036379720725032066,
    -0.028646530216415653,
    -0.008112675039083649,
    0.023971086565699025,
    0.063684189079468864,
    0.105068074967850242,
    0.141275695535080181,
    0.165985968235382142,
    0.174755431125697941,
    0.165985968235382142,
    0.141275695535080181,
    0.105068074967850242,
    0.063684189079468864,
    0.023971086565699025,
    -0.008112675039083649,
    -0.028646530216415653,
    -0.036379720725032066,
    -0.032728051543017583,
    -0.021177300831047914,
    -0.006276159828890907,
    0.007510592131927806,
    0.016803375024339869,
    0.019936570411931212,
    0.017099458717990658,
    0.010006545308465764,
    0.001231759099248474,
    -0.006586594586668882,
    -0.011451261129746782,
    -0.012449556768766754,
    -0.009850306652390593,
    -0.004870918450166409,
    0.000782233811810277,
    0.005447529313824711,
    0.007960861945334647,
    0.007912789576078525,
    0.005663069073443567,
    0.002138712951760944,
    -0.001500810109560981,
    -0.004220318166975844,
    -0.005384016004556956,
    -0.004881336318525623,
    -0.003086934784264536,
    -0.000687877612083288,
    0.001554937575951037,
    0.003033751448417981,
    0.003445423566867316,
    0.002833983867493064,
    0.001527105591954073,
    0.000000000000000002,
    -0.001283145319643530,
    -0.002000587642325403,
    -0.002042926386522992,
    -0.001510402700494670,
    -0.000649752180947985,
    0.000241139688010121,
    0.000907423021693359,
    0.001202751397600165,
    0.001111707331311193,
    0.000730254616939991,
    0.000217699814101464,
    -0.000260299151581667,
    -0.000579228630927423,
    -0.000681852893465041,
    -0.000580044435167060,
    -0.000337292855642454,
    -0.000041427641509155,
    0.000222473287428035,
    0.000391858108372056,
    0.000436323329454989,
    0.000358065154720466,
    0.000186203492620714,
};


float coeff_bandpass[] = {
    -0.000049667891008862,
    -0.000082505495149508,
    -0.000082419725815841,
    -0.000042564605141018,
    0.000031750886731946,
    0.000123628830704511,
    0.000208683928576606,
    0.000261700248992016,
    0.000264044309628554,
    0.000209692356454297,
    0.000107990398357052,
    -0.000017907552011543,
    -0.000136787319490411,
    -0.000217938496299906,
    -0.000240237949491669,
    -0.000199124134982942,
    -0.000109232010858879,
    -0.000001527119759525,
    0.000084736252823148,
    0.000113390071481858,
    0.000063089300699269,
    -0.000063958305670638,
    -0.000239138791031772,
    -0.000411995056264291,
    -0.000521881217561321,
    -0.000514437759131790,
    -0.000359097494486809,
    -0.000063164337554578,
    0.000321579280524773,
    0.000702318619586611,
    0.000959079945854949,
    0.000966951820742127,
    0.000622464464258271,
    -0.000131307217960568,
    -0.001286398735524864,
    -0.002762650578780128,
    0.002830378530404382,
    -0.002519970638830962,
    -0.008923262182541074,
    -0.014740624153076236,
    -0.018331764976970623,
    -0.018516117685207851,
    -0.014932120797064536,
    -0.008185525148043878,
    0.000268012410851050,
    0.008487653030118019,
    0.014569017602758257,
    0.017182073296091019,
    0.015971559538961982,
    0.011696240489674676,
    0.006050238002762203,
    0.001196867984785052,
    -0.000870561751374628,
    0.001030647709703133,
    0.006815017628835920,
    0.015000984997418349,
    0.022978295097917122,
    0.027631775960962515,
    0.026181557330637265,
    0.017029869365863586,
    0.000386325021703308,
    -0.021515141340570039,
    -0.044701374113571932,
    -0.064217527677578934,
    -0.075204531528552832,
    -0.074053292757130351,
    -0.059358640520375372,
    -0.032430104508599761,
    0.002787410432163656,
    0.040394064931157714,
    0.073684408281848995,
    0.096518060010860357,
    0.104605886405147855,
    0.096518060010861578,
    0.073684408281849204,
    0.040394064931157297,
    0.002787410432163698,
    -0.032430104508599664,
    -0.059358640520375344,
    -0.074053292757130046,
    -0.075204531528552748,
    -0.064217527677579059,
    -0.044701374113571862,
    -0.021515141340569949,
    0.000386325021703313,
    0.017029869365863644,
    0.026181557330637185,
    0.027631775960962331,
    0.022978295097917097,
    0.015000984997418327,
    0.006815017628835875,
    0.001030647709703207,
    -0.000870561751374611,
    0.001196867984785021,
    0.006050238002762238,
    0.011696240489674690,
    0.015971559538961975,
    0.017182073296091092,
    0.014569017602758260,
    0.008487653030117972,
    0.000268012410851050,
    -0.008185525148043885,
    -0.014932120797064498,
    -0.018516117685207729,
    -0.018331764976970581,
    -0.014740624153076257,
    -0.008923262182541058,
    -0.002519970638830967,
    0.002830378530404359,
    -0.002762650578780139,
    -0.001286398735524867,
    -0.000131307217960562,
    0.000622464464258268,
    0.000966951820742125,
    0.000959079945854949,
    0.000702318619586618,
    0.000321579280524779,
    -0.000063164337554574,
    -0.000359097494486804,
    -0.000514437759131772,
    -0.000521881217561316,
    -0.000411995056264300,
    -0.000239138791031777,
    -0.000063958305670631,
    0.000063089300699271,
    0.000113390071481856,
    0.000084736252823151,
    -0.000001527119759520,
    -0.000109232010858877,
    -0.000199124134982944,
    -0.000240237949491669,
    -0.000217938496299902,
    -0.000136787319490406,
    -0.000017907552011532,
    0.000107990398357060,
    0.000209692356454315,
    0.000264044309628568,
    0.000261700248992012,
    0.000208683928576599,
    0.000123628830704517,
    0.000031750886731944,
    -0.000042564605141022,
    -0.000082419725815837,
    -0.000082505495149500,
    -0.000049667891008860
};

void setup() {
  // put your setup code here, to run once:
  pinMode(LED_GRN, OUTPUT);
  pinMode(LED_RED, OUTPUT);
  pinMode(SPARE_0, OUTPUT);
  pinMode(SPARE_1, OUTPUT);
  Serial.begin(SERIAL_SPEED);

  delay(5000);

  // wifi_init();

  AudioLogger::instance().begin(Serial, AudioLogger::Warning);
  // LOGLEVEL_AUDIODRIVER = AudioDriverWarning;
  LOGLEVEL_AUDIODRIVER = AudioDriverDebug;
  // LOGLEVEL_AUDIODRIVER = AudioDriverInfo;
  

  my_pins.addI2C(PinFunction::CODEC, CODEC_SCL, CODEC_SDA, CODEC_ADDR, CODEC_I2C_SPEED, myWire);
  my_pins.addI2S(PinFunction::CODEC, CODEC_MCLK, CODEC_BCLK, CODEC_WS, CODEC_DO, CODEC_DI);
  my_pins.begin();
  audio_board.begin();

  Serial.println("I2S begin ..."); 
  auto i2s_config = i2s_stream.defaultConfig(RXTX_MODE);
  i2s_config.copyFrom(info_stereo);
  i2s_config.buffer_size = 512;
  i2s_config.buffer_count = 2;
  i2s_config.port_no = 0;
  i2s_stream.begin(i2s_config); // this should apply I2C and I2S configuration

  // sine_wave.begin(info_mono, N_B4);
  // csvStream.begin(info_stereo);

  filtered.setFilter(0, new FIR<float>(coeff_bandpass));

  // input_split (stereo) --> out_vol (mono)
  input_split.addOutput(filtered, 1);
  input_split.begin(info_stereo);
  Serial.println("Done creating input_split");

  // input_split (mono) --> out_vol (mono)
  out_vol.setVolume(1.0);
  out_vol.setOutput(mono_to_stereo);
  out_vol.begin(info_mono);

  mono_to_stereo.begin(1, 2);

  // clockBus.begin(CLOCK_SDA, CLOCK_SCL, 100000);
  /*
  Wire.begin(CLOCK_SDA, CLOCK_SCL);
  Serial.print("[SI5351] Status: ");
  Serial.println(si5351.si5351_read(SI5351_DEVICE_STATUS));
  si5351.init(SI5351_CRYSTAL_LOAD_8PF , 26000000 , 0);
  
  si5351.set_pll(SI5351_PLL_FIXED, SI5351_PLLA);
  si5351.set_pll(SI5351_PLL_FIXED, SI5351_PLLB);

  si5351.drive_strength(SI5351_CLK0, SI5351_DRIVE_2MA);
  si5351.drive_strength(SI5351_CLK1, SI5351_DRIVE_2MA);
  
  si5351.set_freq(10000000 * 100, SI5351_CLK0);
  si5351.set_freq(20000000 * 100, SI5351_CLK1);
  si5351.set_freq(30000000 * 100, SI5351_CLK2);

  si5351.output_enable(SI5351_CLK0, 1);
  si5351.output_enable(SI5351_CLK1, 1);
  si5351.output_enable(SI5351_CLK2, 0);
  */

}

void loop() { 
  copier_1.copy();

  
  if(millis() - t > 2000) {
    AudioDriver *driver = audio_board.getDriver();
    if(counter % 2 == 0) {
      // driver->setMute(false, 0);
      // driver->setMute(true, 1);
      driver->setInputVolume(0);
      digitalWrite(LED_GRN, HIGH);
    }
    else {
      // driver->setMute(true, 0);
      // driver->setMute(false, 1);
      driver->setInputVolume(100);
      digitalWrite(LED_GRN, LOW);
    }      
    counter++;
    t = millis();
  }
  
  
}